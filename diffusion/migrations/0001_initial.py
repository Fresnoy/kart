# Generated by Django 2.2.6 on 2019-11-07 12:43

import diffusion.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_countries.fields
import multiselectfield.db.fields
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('production', '0001_initial'),
        ('taggit', '0003_taggeditem_add_unique_index'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('people', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Place',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('zipcode', models.CharField(blank=True, help_text='Code postal / Zipcode', max_length=10)),
                ('city', models.CharField(blank=True, max_length=50)),
                ('country', django_countries.fields.CountryField(default='', max_length=2)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='places', to='people.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='MetaEvent',
            fields=[
                ('event', models.OneToOneField(limit_choices_to=diffusion.models.main_event_true, on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='meta_event', serialize=False, to='production.Event')),
                ('genres', multiselectfield.db.fields.MultiSelectField(choices=[('FILM', 'Films'), ('PERF', 'Performances'), ('INST', 'Installations')], help_text='Global kind of productions shown', max_length=14)),
                ('important', models.BooleanField(default=True, help_text='Helps hide minor events')),
                ('keywords', taggit.managers.TaggableManager(blank=True, help_text='Qualifies Festival: digital arts, residency, electronic festival', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
        ),
        migrations.CreateModel(
            name='MetaAward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(max_length=255, null=True)),
                ('description', models.TextField(null=True)),
                ('type', models.CharField(choices=[('INDIVIDUAL', 'Individual'), ('GROUP', 'Group'), ('CAREER', 'Career'), ('OTHER', 'Other')], max_length=10, null=True)),
                ('event', models.ForeignKey(help_text='Main Event', limit_choices_to=diffusion.models.main_event_true, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='meta_award', to='production.Event')),
                ('task', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='meta_award', to='production.StaffTask')),
            ],
        ),
        migrations.CreateModel(
            name='Award',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ex_aequo', models.BooleanField(default=False)),
                ('date', models.DateField(null=True)),
                ('amount', models.CharField(blank=True, help_text='money, visibility, currency free', max_length=255)),
                ('note', models.TextField(blank=True, help_text='Free note')),
                ('artist', models.ManyToManyField(blank=True, help_text='Staff or Artist', limit_choices_to=diffusion.models.staff_and_artist_user_limit, related_name='award', to=settings.AUTH_USER_MODEL)),
                ('artwork', models.ManyToManyField(blank=True, related_name='award', to='production.Artwork')),
                ('event', models.ForeignKey(limit_choices_to=diffusion.models.main_event_false, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='award', to='production.Event')),
                ('giver', models.ManyToManyField(blank=True, help_text='Who hands the arward', related_name='give_award', to=settings.AUTH_USER_MODEL)),
                ('meta_award', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='award', to='diffusion.MetaAward')),
                ('sponsor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='award', to='people.Organization')),
            ],
        ),
        migrations.CreateModel(
            name='Diffusion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first', models.CharField(blank=True, choices=[('WORLD', 'Mondial'), ('INTER', 'International'), ('NATIO', 'National')], help_text='Qualifies the first broadcast', max_length=5, null=True)),
                ('on_competition', models.BooleanField(default=False, help_text='IN / OFF : On competion or not')),
                ('artwork', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='diffusion', to='production.Artwork')),
                ('event', models.ForeignKey(default=1, limit_choices_to=diffusion.models.main_event_false, on_delete=django.db.models.deletion.PROTECT, to='production.Event')),
            ],
            options={
                'unique_together': {('id', 'artwork', 'event')},
            },
        ),
    ]
